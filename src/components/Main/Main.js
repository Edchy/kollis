import { useEffect, useState } from "react";
import Button from "../Button/Button";
import NoResult from "../NoResult/NoResult";
import InfoCircle from "../InfoCircle/InfoCircle";
import Loader from "../Loader/Loader";
import "./main.css";
// import SlideUp from "./SlideUp/SlideUp";

// // // // // // // // // //
// // // COMPONENT // // //
// // // // // // // // //
export default function Main({ bloodSugar, dailyInsulin, isBreakfastToggled }) {
  // state f√∂r de livsmedel som anv√§ndaren l√§gger till i sin "lista". initialt en tom array.
  const [userList, setUserList] = useState([]);

  // tar objekt som ska tas bort som argument. anropar state-s√§ttar funktionen f√∂r listan.
  // filtrerar listan och returnerar endast de objekt vars name inte √§r samma som det som skickades med som argument
  function handleDelete(item) {
    console.log(item.name);
    setUserList((prev) => prev.filter((obj) => obj.name !== item.name));
  }
  // l√§gger till en ny nutrient(matr√§tt/dryck)
  function handleAdd(newNutrient) {
    // letar igenom arrayen f√∂r att se om objekte redan finns. V√§rdet som sparas i variabeln √§r indexet d√§r dubbletten finns. Annars -1 om det inte finns.
    let existIndex = userList.findIndex(
      (existingObj) => existingObj.name === newNutrient.name
    );

    // om objektet inte redan finns -> setUserList tar den "gamla" listan och "spreadar" in den tillsammans med den nya objektet
    if (existIndex === -1) setUserList((prev) => [...prev, newNutrient]);
    // Annars > uppdatera objektets properties f√∂r totala kolhydrater samt serving-size.
    // detta genom att √•terigen s√§tta state f√∂r arrayen, genom att mappa igenom den och d√§r indexet √§r samma som variabeln existIndex returnera samma properties (...obj(endast name i detta fall)), men uppdatera totala kolhydrater samt serving-size genom att plussa p√• de nya med de gamla. om index !== existIndex returneras bara objektet.
    else
      setUserList((prev) =>
        prev.map((obj, index) =>
          index === existIndex
            ? {
                ...obj,
                carbohydrates_total_g:
                  obj.carbohydrates_total_g + newNutrient.carbohydrates_total_g,
                serving_size_g: obj.serving_size_g + newNutrient.serving_size_g,
              }
            : obj
        )
      );
  }
  return (
    <main className="main">
      {" "}
      <SearchAndResultsColumn
        onHandleAdd={handleAdd}
        setUserList={setUserList}
      />
      <UserNutrientListColumn
        onHandleDelete={handleDelete}
        userList={userList}
        bloodSugar={bloodSugar}
        dailyInsulin={dailyInsulin}
        isBreakfastToggled={isBreakfastToggled}
      />
    </main>
  );
}

// // // // // // // // // //
// // // COMPONENT // // //
// // // // // // // // //
function SearchAndResultsColumn({ onHandleAdd, setUserList }) {
  const [searchResults, setSearchResults] = useState([]);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [query, setQuery] = useState("");
  // searched skickas ner som prop till till searchResultsList. Agerar boolean f√∂r om komponenten NoResult ska renderars eller ej (conditional rendering). S√§tts till true n√§r funktionen handleSubmit k√∂rs. Hela syftet h√§r √§r att endast rendera NoResult komponenten efter att man gjort en s√∂kning och inte initialt n√§r sidan har laddats. En l√∂sning som visserligen fungerar men som skulle kunna g√∂ras p√• ett enklare s√§tt.
  const [searched, setSearched] = useState(false);

  // H√§mtadata funktionen deklareras
  async function getData(q) {
    // Visar att datan laddar
    setIsLoading(true);
    // setError("");
    const url = "https://api.calorieninjas.com/v1/nutrition?query=" + q;
    try {
      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": "OnOOnBzJskNHQToKj+jVlg==7c0VISHeXUUmy9Sz",
        },
      });
      // Kasta ny error om response INTE √§r OK.
      if (!response.ok)
        throw new Error(`There was an error fetching your search`);

      const data = await response.json();
      console.log(data);
      return data;
    } catch (error) {
      setError(error.message);
      // N√§r allt √§r klart finns ett resultat och "loading state" s√§tts till false
    } finally {
      setIsLoading(false);
    }
  }
  // func f√∂r funktionen att "quick adda" saker till listan
  function handleQuickAdd() {
    // om n√•got skrivits in, anropa h√§mtadatafunktion med det som skrivits in som param, s√§tter arrayen "userList"s state till datan.
    if (query) {
      getData(query).then((data) => {
        // tar inte med det gamla statet = ny lista skapas
        // onSetChosen((prev) => [...prev, ...data.items]) skulle g√∂ra detta;
        setUserList(data.items);
      });
    }
    // "resetta" input state
    setQuery("");
  }

  // Funktion f√∂r n√§r searchform submittas (Enter eller search(submit) knapp trycks)
  // I princip samma som f√∂reg√•ende funktion (kanske skulle kunna vara DRY och sl√• ihop dessa p√• n√•got s√§tt).
  function handleSubmit(e) {
    e.preventDefault();

    if (query) {
      getData(query).then((data) => {
        setSearchResults(data.items);
      });
    }

    setQuery("");
    setSearched(true);
  }
  return (
    <section className="search-results-box">
      <form className="search-form" onSubmit={handleSubmit}>
        {/* Controlled Element */}
        {/* Value s√§tts till query-variabeln som √§r state. N√§r input √§ndras anropas setQuery med eventets targets v√§rde (input) och rerendrar och det nya v√§rdet reflekteras i input-rutan eftersom dess value √§r bundet till state-variabeln "query"*/}
        <input
          className="search"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          type="text"
          placeholder="Search food & drink...lb, g, kg, oz,"
        />
        <div className="form-buttons">
          <Button className="search-btn primary-btn" type="submit">
            Search
          </Button>

          {/* InfoCircle tar emot en komponent(med props) som prop. Tyckte detta var r√§tt coolt att det gick att g√∂ra. Blir inte helt l√§ttl√§sligt. Men jag ville att man ska kunna skriva in en textstr√§ng som children-prop d√• detta ska vara en √•teranv√§ndbar komponent d√§r man l√§tt kan fylla p√• med vad man vill ha i den som children.*/}
          <InfoCircle
            offset={-24}
            component={
              <Button
                className="quickadd-btn secondary-btn"
                onClick={handleQuickAdd}
                type="button"
              >
                Quick Add
              </Button>
            }
          >
            {" "}
            <p>
              Using{" "}
              <span style={{ textDecoration: "underline" }}>Quick Add</span>{" "}
              lets you quickly add multiple foods and drinks at once. <br />
              Simply enter the amount followed by a space and the name of the
              item that you want to add. <br />
              <br />
              <em>search example: 200g pasta 1 apple and a turkey sandwich</em>
            </p>
            <br />
            <p>
              <strong>Note!</strong> not explicitly specifying the weight of the
              item that you want can lead to less accurate results. Always
              double check the results from a reliable resource like for example{" "}
              <em>the USDA.</em>
            </p>
          </InfoCircle>
        </div>
      </form>
      {/* Conditional rendering */}
      {/* Endast om isLoading och error √§r false ritas SearchResultsListan ut */}
      {isLoading && <Loader />}
      {error && <p>{error}</p>}
      {!isLoading && !error && (
        <SearchResultsList
          onHandleAdd={onHandleAdd}
          searchResults={searchResults}
          searched={searched}
        />
      )}
    </section>
  );
}

function SearchResultsList({ searchResults, onHandleAdd, searched }) {
  // Anv√§nder state, useEffect samt conditional rendering f√∂r att rendera komponenten NoResult endast EFTER den initiala renderingen. Anledningen √§r att texten om att s√∂kresultat inte gav n√•got svar annars visas direkt. K√§nns som att det skulle kunna l√∂sas snyggare/effektivare (eftersom jag s√§tter state i min useEffect s√• kr√§vs en extra render (useEffect √§r async och k√∂rs efter den nya DOMen ritats ut), vilket ju p√•verkar prestanda om det anv√§nds f√∂r mycket). Men med detta fick jag en chans att prova p√• useEffect.

  // useEffect(() => setX(false), []); searched === false
  // BEH√ñVER FIXAS

  return (
    <ul className="search-results">
      {/* Om arrayen inneh√•ller n√•got skrivs det annars skrivs meddelande att s√∂k inte gav tr√§ff */}
      {/* varje s√∂kresultat (objekt) mappas till en instans av Nutrient-komponenten och skickar med objektet som prop */}
      {searchResults.length > 0 || !searched ? (
        searchResults.map((result) => (
          <Nutrient
            onHandleAdd={onHandleAdd}
            key={result.name}
            searchResult={result}
          />
        ))
      ) : (
        <NoResult emoji="üòü" emojiSize="3">
          Sorry! We've been searching the pantry, but couldn't find what you're
          looking for.
        </NoResult>
      )}
    </ul>
  );
}
function NumberInput({ grams, setGrams, title }) {
  return (
    <div className="number-input">
      <label htmlFor={title}>{title}:</label>
      <Button
        className="number-control-btn"
        onClick={() => setGrams((prev) => prev - 10)}
      >
        ‚ûñ
      </Button>
      {/* Controlled element */}
      <input
        id={title}
        // min="0"
        // max="4000"
        // step="10"
        value={grams}
        // Value castas om till nummer
        onChange={(e) => setGrams(Number(e.target.value))}
      />
      <Button
        className="number-control-btn"
        onClick={() => setGrams((prev) => prev + 10)}
      >
        ‚ûï
      </Button>
    </div>
  );
}
function Nutrient({ searchResult, onHandleAdd }) {
  // definierar state f√∂r att kunna via input l√•ta anv√§ndaren v√§lja antal gram att l√§gga till.
  // s√§tts initialt till objektets v√§rde f√∂r serving-size (default 100g)
  const [grams, setGrams] = useState(searchResult.serving_size_g);
  // genom att anv√§nda state uppdateras den h√§r variabeln dynamiskt n√§r state f√∂r grams √§ndras.
  let carbs =
    searchResult.carbohydrates_total_g * (grams / searchResult.serving_size_g);
  return (
    <li className="nutrient">
      <div className="nutrient-info">
        <h3 className="nutrient-title">{searchResult.name}</h3>

        <NumberInput title="Grams" grams={grams} setGrams={setGrams} />
        {/* <input
          id="grams"
          type="number"
          min="0"
          max="4000"
          step="10"
          value={grams}
          onChange={(e) => setGrams(Number(e.target.value))}
        /> */}
        <p>
          Carbs: <span className="nutrient-total">{carbs.toFixed(1)}g</span>
        </p>
      </div>
      {/* H√§r har det "prop-drillats" ordentligt. handleAdd har skickats ner genom m√•nga komponenter. Endast f√∂r att anv√§ndas h√§r (kan l√∂sas b√§ttre kanske?) i komponentens onClick prop. Funktionen tar ett nytt objekt som parameter och kopierar in alla properties fr√•n objektet som skickades in som prop till Item-komponenten. Men totala kolhydrater och serving-size propertiesen skrivs √∂ver med de nya anv√§ndar-uppdaterade v√§rdena */}
      <Button
        className="add-btn"
        onClick={() =>
          onHandleAdd({
            ...searchResult,
            serving_size_g: grams,
            carbohydrates_total_g: carbs,
          })
        }
      >
        ‚ûï
      </Button>
    </li>
  );
}
// // // // // // // // // //
// // // COMPONENT // // //
// // // // // // // // //

// visar upp listan f√∂r valda objekt
function UserNutrientListColumn({
  userList,
  onHandleDelete,
  dailyInsulin,
  bloodSugar,
  isBreakfastToggled,
}) {
  // r√§kna ut totalt antal kolhydrater genom att plussa ihop alla v√§rden f√∂r varje objekts property f√∂r antal kolhydrater
  const totalCarbs = userList.reduce(
    (acc, curr) => acc + curr.carbohydrates_total_g,
    0
  );
  // ENHETER f√∂r att s√§nka
  const idealBs = 6;
  const corrFactor = 100 / dailyInsulin;
  const corrDose =
    bloodSugar > idealBs ? (bloodSugar - idealBs) / corrFactor : 0;
  // console.log(corrDose.toFixed(1));

  // 300 eller 500 regeln, hur m√•nga gram kolhydrater tar 1 enhet insulin hand om
  const carbFactor = isBreakfastToggled
    ? 300 / dailyInsulin
    : 500 / dailyInsulin;
  // console.log(carbFactor);
  const insulinDose = totalCarbs / carbFactor + corrDose;
  console.log(insulinDose.toFixed(1));
  // console.log(isBreakfastToggled);

  return (
    <section className="user-list-column">
      <ul className="user-list">
        {/* "mappar ut" varje objekts olika properties till HTML-element */}
        {userList.map((item) => (
          <li className="user-list-item" key={item.name}>
            <div>
              <h3>
                {item.name} <span>{item.serving_size_g}g</span>
              </h3>
              <p className="item-carbs">
                {item.carbohydrates_total_g.toFixed(1)}
              </p>
            </div>
            {/* varje objekt f√•r en knapp, d√§r funktionen f√∂r delete skickas in som prop. Funktionen tar objektet som parameter och filtrerar bort detta i handleDelete funktionen */}
            <Button className="delete-btn" onClick={() => onHandleDelete(item)}>
              ‚ùå
            </Button>
          </li>
        ))}
      </ul>
      <div className="total-carbs-box">
        <p>total</p>
        <h2>{totalCarbs.toFixed(1)}g</h2>
        <p>{insulinDose.toFixed(1)}U</p>
      </div>
    </section>
  );
}
