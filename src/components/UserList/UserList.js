import { useEffect, useState, useRef } from "react";
import UserListItem from "../UserListItem/UserListItem";
import "./userlist.css";

export default function UserList({ userList, onHandleDelete }) {
  // LONG COMMENT ALERT!
  // Jag ville p친 n친got s칛tt 칬ka UX genom att l친ta anv칛ndaren f친 feedback p친 n칛r man l칛gger till objet i listan eller n칛r ett objekt som redan finns i listan uppdateras. En visuell markering som visar vad det 칛r som h칛nder n칛r "l칛gga till knappen" klickas. Visste inte riktigt hur jag skulle g칬ra detta och jag provade olika l칬sningar utan st칬rre framg친ng. Tillslut efter massa googlande, stack overflowande och dividerande med chatGPT hittade jag en l칬sning som fungerade. Jag kan inte s칛ga att jag helt och h친llet f칬rst친r l칬sningen, d친 den introducerade, f칬r mig, nya koncept som useRef-hooken och Set().
  // Min tanke var att varje g친ng den h칛r komponenten renderas (vilket den g칬r varje g친ng ett objekt uppdateras eller l칛ggs till i userList) s친 ska den tidigare userList j칛mf칬ras med den nya. Om n친got har 칛ndrats s친 ska det elementet f친 ett klassnamn och en animation via klassnamnet.
  const [newOrUpdated, setNewOrUpdated] = useState(new Set());
  const prevUserList = usePrev(userList);
  function usePrev(val) {
    const ref = useRef();
    useEffect(() => {
      ref.current = val;
    });
    return ref.current;
  }
  useEffect(() => {
    if (prevUserList) {
      const newNewOrUpdated = new Set();

      userList.forEach((item) => {
        const prevItem = prevUserList.find((prev) => prev.name === item.name);

        if (!prevItem || prevItem.serving_size_g !== item.serving_size_g) {
          newNewOrUpdated.add(item.name);
        }
      });

      if (newNewOrUpdated.size > 0) {
        setNewOrUpdated(newNewOrUpdated);
      }
    }
    const timer = setTimeout(() => setNewOrUpdated(new Set()), 500);
    return () => clearTimeout(timer);
  }, [userList, prevUserList]);

  return (
    <ul className="user-list">
      {/* om det finns n친got i listan - "mappar ut" varje objekt till en komponent som tar in objektet som prop */}
      {userList.length > 0 ? (
        userList.map((item) => (
          <UserListItem
            onHandleDelete={onHandleDelete}
            item={item}
            key={item.name}
            // Kolla om item.name finns i changedItems, isf ge klass.
            className={newOrUpdated.has(item.name) ? "highlight" : ""}
          />
        ))
      ) : (
        <p className="empty-text">游꼛 游꼘 游볳 游꼚</p>
      )}
    </ul>
  );
}
