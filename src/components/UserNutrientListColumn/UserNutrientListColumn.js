import { useEffect, useState, useRef } from "react";
import Button from "../Button/Button";
import "./usernutrientlistcolumn.css";
import { UserListItem } from "../UserListItem/UserListItem";

// visar upp listan f칬r valda objekt
export function UserNutrientListColumn({
  userList,
  setUserList,
  onHandleDelete,
  dailyInsulin,
  bloodSugar,
  isBreakfastToggled,
}) {
  const [isScrolling, setIsScrolling] = useState(false);

  ////////////////////
  //TEST
  // LONG COMMENT ALERT!
  // Jag ville p친 n친got s칛tt 칬ka UX genom att l친ta anv칛ndaren f친 feedback p친 n칛r man l칛gger till objet i listan eller n칛r ett objekt som redan finns i listan uppdateras. En visuell markering som visar vad det 칛r som h칛nder n칛r "l칛gga till knappen" klickas. Visste inte riktigt hur jag skulle g칬ra detta och jag provade olika l칬sningar utan st칬rre framg친ng. Tillslut efter massa googlande, stack overflowande och dividerande med chatGPT hittade jag en l칬sning som fungerade. Jag kan inte s칛ga att jag helt och h친llet f칬rst친r l칬sningen, d친 den till st칬rre del, som sagt, 칛r resultatet av copy/paste och att den introducerade, f칬r mig, nya koncept som useRef-hooken och Set().
  // Min tanke var att varje g친ng den h칛r komponenten renderas (vilket den g칬r varje g친ng ett objekt uppdateras eller l칛ggs till i userList) s친 ska den tidigare userList j칛mf칬ras med den nya. Om n친got har 칛ndrats s친 ska det elementet f친 ett klassnamn och en animation via klassnamnet.
  const [changedItems, setChangedItems] = useState(new Set());
  const prevUserList = usePrevious(userList);
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }

  useEffect(() => {
    if (prevUserList) {
      const newChangedItems = new Set();

      userList.forEach((item) => {
        const prevItem = prevUserList.find((prev) => prev.name === item.name);

        // Compare based on a specific property or a simple condition
        if (!prevItem || prevItem.serving_size_g !== item.serving_size_g) {
          newChangedItems.add(item.name);
        }
      });

      // Check if there's any change to update
      if (newChangedItems.size > 0) {
        setChangedItems(newChangedItems);
      }
    }

    // Clear the set after some time
    const timer = setTimeout(() => setChangedItems(new Set()), 300);

    return () => clearTimeout(timer);
  }, [userList, prevUserList]);
  //TEST
  ////////////////////////

  // r칛kna ut totalt antal kolhydrater genom att plussa ihop alla v칛rden f칬r varje objekts property f칬r antal kolhydrater
  const totalCarbs = userList.reduce(
    (acc, curr) => acc + curr.carbohydrates_total_g,
    0
  );
  // ENHETER f칬r att s칛nka
  const idealBs = 6;
  const corrFactor = 100 / dailyInsulin;
  const corrDose =
    bloodSugar > idealBs ? (bloodSugar - idealBs) / corrFactor : 0;

  // 300 eller 500 regeln, hur m친nga gram kolhydrater tar 1 enhet insulin hand om
  const carbFactor = isBreakfastToggled
    ? 300 / dailyInsulin
    : 500 / dailyInsulin;

  const insulinDose = totalCarbs / carbFactor + corrDose;

  // Koden i denna useEffect 칛r ett samarbete mellan mig och chatGPT.
  // N칛r komponenten mountas k칬rs denna. Jag skapar en referens till
  useEffect(() => {
    let timeout;
    const handleScroll = () => {
      setIsScrolling(true);
      clearTimeout(timeout);
      timeout = setTimeout(() => setIsScrolling(false), 100);
    };
    const el = document.querySelector(".user-list-column");
    el.addEventListener("scroll", handleScroll);
    return () => {
      el.removeEventListener("scroll", handleScroll);
      clearTimeout(timeout);
    };
  }, []);

  return (
    <section className="user-list-column">
      <ul className="user-list">
        {/* "mappar ut" varje objekts olika properties till HTML-element */}
        {userList.length > 0 ? (
          userList.map((item) => (
            <UserListItem
              onHandleDelete={onHandleDelete}
              item={item}
              key={item.name}
              className={changedItems.has(item.name) ? "highlight" : ""}
            />
          ))
        ) : (
          <p className="empty-text">游꼞</p>
        )}
      </ul>
      <div className="total-carbs-box">
        {userList.length > 1 && (
          <div style={{ opacity: isScrolling ? 0 : 1 }}>
            <Button
              onClick={() => setUserList([])}
              className="btn reset-list-btn"
            >
              clear all
            </Button>
          </div>
        )}
        <p>total</p>
        <h2>{totalCarbs.toFixed(1)}g</h2>
        {dailyInsulin && <h3>{insulinDose.toFixed(1)}U</h3>}
      </div>
    </section>
  );
}
